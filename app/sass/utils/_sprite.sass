// SASS variables are information about icon's compiled state, stored under its original file name
//
// .icon-home
//   width: $icon-home-width
//
// The large array-like variables contain all information about a single icon
// $icon-home: x y offset_x offset_y width height total_width total_height image_path
//
// At the bottom of this section, we provide information about the spritesheet itself
// $spritesheet: width height image $spritesheet-sprites
$close-name: 'close'
$close-x: 428px
$close-y: 198px
$close-offset-x: -428px
$close-offset-y: -198px
$close-width: 27px
$close-height: 27px
$close-total-width: 517px
$close-total-height: 334px
$close-image: 'sprite.png'
$close: (428px, 198px, -428px, -198px, 27px, 27px, 517px, 334px, 'sprite.png', 'close', )
$cursor-name: 'cursor'
$cursor-x: 304px
$cursor-y: 0px
$cursor-offset-x: -304px
$cursor-offset-y: 0px
$cursor-width: 114px
$cursor-height: 114px
$cursor-total-width: 517px
$cursor-total-height: 334px
$cursor-image: 'sprite.png'
$cursor: (304px, 0px, -304px, 0px, 114px, 114px, 517px, 334px, 'sprite.png', 'cursor', )
$gear-name: 'gear'
$gear-x: 304px
$gear-y: 124px
$gear-offset-x: -304px
$gear-offset-y: -124px
$gear-width: 112px
$gear-height: 78px
$gear-total-width: 517px
$gear-total-height: 334px
$gear-image: 'sprite.png'
$gear: (304px, 124px, -304px, -124px, 112px, 78px, 517px, 334px, 'sprite.png', 'gear', )
$left-name: 'left'
$left-x: 428px
$left-y: 0px
$left-offset-x: -428px
$left-offset-y: 0px
$left-width: 89px
$left-height: 89px
$left-total-width: 517px
$left-total-height: 334px
$left-image: 'sprite.png'
$left: (428px, 0px, -428px, 0px, 89px, 89px, 517px, 334px, 'sprite.png', 'left', )
$mapbg-name: 'mapbg'
$mapbg-x: 0px
$mapbg-y: 0px
$mapbg-offset-x: 0px
$mapbg-offset-y: 0px
$mapbg-width: 294px
$mapbg-height: 250px
$mapbg-total-width: 517px
$mapbg-total-height: 334px
$mapbg-image: 'sprite.png'
$mapbg: (0px, 0px, 0px, 0px, 294px, 250px, 517px, 334px, 'sprite.png', 'mapbg', )
$medal-name: 'medal'
$medal-x: 129px
$medal-y: 260px
$medal-offset-x: -129px
$medal-offset-y: -260px
$medal-width: 113px
$medal-height: 66px
$medal-total-width: 517px
$medal-total-height: 334px
$medal-image: 'sprite.png'
$medal: (129px, 260px, -129px, -260px, 113px, 66px, 517px, 334px, 'sprite.png', 'medal', )
$people-name: 'people'
$people-x: 0px
$people-y: 260px
$people-offset-x: 0px
$people-offset-y: -260px
$people-width: 119px
$people-height: 74px
$people-total-width: 517px
$people-total-height: 334px
$people-image: 'sprite.png'
$people: (0px, 260px, 0px, -260px, 119px, 74px, 517px, 334px, 'sprite.png', 'people', )
$phone-name: 'phone'
$phone-x: 465px
$phone-y: 198px
$phone-offset-x: -465px
$phone-offset-y: -198px
$phone-width: 11px
$phone-height: 11px
$phone-total-width: 517px
$phone-total-height: 334px
$phone-image: 'sprite.png'
$phone: (465px, 198px, -465px, -198px, 11px, 11px, 517px, 334px, 'sprite.png', 'phone', )
$protect-name: 'protect'
$protect-x: 252px
$protect-y: 260px
$protect-offset-x: -252px
$protect-offset-y: -260px
$protect-width: 109px
$protect-height: 64px
$protect-total-width: 517px
$protect-total-height: 334px
$protect-image: 'sprite.png'
$protect: (252px, 260px, -252px, -260px, 109px, 64px, 517px, 334px, 'sprite.png', 'protect', )
$right-name: 'right'
$right-x: 428px
$right-y: 99px
$right-offset-x: -428px
$right-offset-y: -99px
$right-width: 89px
$right-height: 89px
$right-total-width: 517px
$right-total-height: 334px
$right-image: 'sprite.png'
$right: (428px, 99px, -428px, -99px, 89px, 89px, 517px, 334px, 'sprite.png', 'right', )
$spritesheet-width: 517px
$spritesheet-height: 334px
$spritesheet-image: 'sprite.png'
$spritesheet-sprites: ($close, $cursor, $gear, $left, $mapbg, $medal, $people, $phone, $protect, $right, )
$spritesheet: (517px, 334px, 'sprite.png', $spritesheet-sprites, )

// The provided mixins are intended to be used with the array-like variables
//
// .icon-home
//   @include sprite-width($icon-home)
//
// .icon-email
//   @include sprite($icon-email)
//
// Example usage in HTML:
//   `display: block` sprite:
//   <div class="icon-home"></div>
//
// To change `display` (e.g. `display: inline-block;`), we suggest using a common CSS class:
//   // CSS
//   .icon {
//     display: inline-block;
//   }
//
//   // HTML
//   <i class="icon icon-home"></i>
@mixin sprite-width($sprite)
  width: nth($sprite, 5)

@mixin sprite-height($sprite)
  height: nth($sprite, 6)

@mixin sprite-position($sprite)
  $sprite-offset-x: nth($sprite, 3)
  $sprite-offset-y: nth($sprite, 4)
  background-position: $sprite-offset-x  $sprite-offset-y

@mixin sprite-image($sprite)
  $sprite-image: nth($sprite, 9)
  background-image: url(#{$sprite-image})

@mixin sprite($sprite)
  @include sprite-image($sprite)
  @include sprite-position($sprite)
  @include sprite-width($sprite)
  @include sprite-height($sprite)

// The `sprites` mixin generates identical output to the CSS template
//   but can be overridden inside of SASS
//
// @include sprites($spritesheet-sprites)
@mixin sprites($sprites)
  @each $sprite in $sprites
    $sprite-name: nth($sprite, 10)
    .#{$sprite-name}
      @include sprite($sprite)
