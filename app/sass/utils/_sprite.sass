// SASS variables are information about icon's compiled state, stored under its original file name
//
// .icon-home
//   width: $icon-home-width
//
// The large array-like variables contain all information about a single icon
// $icon-home: x y offset_x offset_y width height total_width total_height image_path
//
// At the bottom of this section, we provide information about the spritesheet itself
// $spritesheet: width height image $spritesheet-sprites
$btnshadow-name: 'btnshadow'
$btnshadow-x: 0px
$btnshadow-y: 0px
$btnshadow-offset-x: 0px
$btnshadow-offset-y: 0px
$btnshadow-width: 375px
$btnshadow-height: 25px
$btnshadow-total-width: 375px
$btnshadow-total-height: 124px
$btnshadow-image: 'sprite.png'
$btnshadow: (0px, 0px, 0px, 0px, 375px, 25px, 375px, 124px, 'sprite.png', 'btnshadow', )
$left-name: 'left'
$left-x: 0px
$left-y: 35px
$left-offset-x: 0px
$left-offset-y: -35px
$left-width: 89px
$left-height: 89px
$left-total-width: 375px
$left-total-height: 124px
$left-image: 'sprite.png'
$left: (0px, 35px, 0px, -35px, 89px, 89px, 375px, 124px, 'sprite.png', 'left', )
$phone-name: 'phone'
$phone-x: 198px
$phone-y: 35px
$phone-offset-x: -198px
$phone-offset-y: -35px
$phone-width: 11px
$phone-height: 11px
$phone-total-width: 375px
$phone-total-height: 124px
$phone-image: 'sprite.png'
$phone: (198px, 35px, -198px, -35px, 11px, 11px, 375px, 124px, 'sprite.png', 'phone', )
$right-name: 'right'
$right-x: 99px
$right-y: 35px
$right-offset-x: -99px
$right-offset-y: -35px
$right-width: 89px
$right-height: 89px
$right-total-width: 375px
$right-total-height: 124px
$right-image: 'sprite.png'
$right: (99px, 35px, -99px, -35px, 89px, 89px, 375px, 124px, 'sprite.png', 'right', )
$spritesheet-width: 375px
$spritesheet-height: 124px
$spritesheet-image: 'sprite.png'
$spritesheet-sprites: ($btnshadow, $left, $phone, $right, )
$spritesheet: (375px, 124px, 'sprite.png', $spritesheet-sprites, )

// The provided mixins are intended to be used with the array-like variables
//
// .icon-home
//   @include sprite-width($icon-home)
//
// .icon-email
//   @include sprite($icon-email)
//
// Example usage in HTML:
//   `display: block` sprite:
//   <div class="icon-home"></div>
//
// To change `display` (e.g. `display: inline-block;`), we suggest using a common CSS class:
//   // CSS
//   .icon {
//     display: inline-block;
//   }
//
//   // HTML
//   <i class="icon icon-home"></i>
@mixin sprite-width($sprite)
  width: nth($sprite, 5)

@mixin sprite-height($sprite)
  height: nth($sprite, 6)

@mixin sprite-position($sprite)
  $sprite-offset-x: nth($sprite, 3)
  $sprite-offset-y: nth($sprite, 4)
  background-position: $sprite-offset-x  $sprite-offset-y

@mixin sprite-image($sprite)
  $sprite-image: nth($sprite, 9)
  background-image: url(#{$sprite-image})

@mixin sprite($sprite)
  @include sprite-image($sprite)
  @include sprite-position($sprite)
  @include sprite-width($sprite)
  @include sprite-height($sprite)

// The `sprites` mixin generates identical output to the CSS template
//   but can be overridden inside of SASS
//
// @include sprites($spritesheet-sprites)
@mixin sprites($sprites)
  @each $sprite in $sprites
    $sprite-name: nth($sprite, 10)
    .#{$sprite-name}
      @include sprite($sprite)
